// WPA.STORE Mobile App - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
class WPAMobileApp {
    constructor() {
        this.currentPage = 'home';
        this.searchQuery = '';
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WPA.STORE...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.initComponents();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        this.initPages();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.setupNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        this.initSearch();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
        this.initForms();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
        this.initPWA();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.loadData();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.setupEvents();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.showPage('home');
        
        console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    initComponents() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        if (typeof Components !== 'undefined') {
            Components.init();
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    initPages() {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü...');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const categorySelect = document.getElementById('appCategory');
        if (categorySelect && typeof WPA_DATA !== 'undefined') {
            categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
            WPA_DATA.categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });
            console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º—É:', WPA_DATA.categories.length);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation() {
        console.log('üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ tab-link —ç–ª–µ–º–µ–Ω—Ç—ã
        const tabLinks = document.querySelectorAll('.tab-link');
        console.log('–ù–∞–π–¥–µ–Ω–æ tab-link —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', tabLinks.length);
        
        tabLinks.forEach((link, index) => {
            const page = link.getAttribute('data-page');
            console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ tab-link ${index + 1}:`, page);
            
            link.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üëÜ –ö–ª–∏–∫ –ø–æ tab-link:', page);
                this.showPage(page);
            });
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    showPage(pageName) {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', pageName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => {
            page.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.querySelector(`[data-name="${pageName}"]`);
        if (targetPage) {
            targetPage.style.display = 'block';
            this.currentPage = pageName;
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∞:', pageName);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.loadPageContent(pageName);
        } else {
            console.error('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pageName);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        this.updateActiveTab(pageName);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    updateActiveTab(pageName) {
        const tabLinks = document.querySelectorAll('.tab-link');
        tabLinks.forEach(link => {
            link.classList.remove('tab-link-active');
            if (link.getAttribute('data-page') === pageName) {
                link.classList.add('tab-link-active');
            }
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadPageContent(pageName) {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageName);
        
        switch (pageName) {
            case 'home':
                this.loadHomePage();
                break;
            case 'categories':
                this.loadCategoriesPage();
                break;
            case 'submit':
                this.loadSubmitPage();
                break;
            case 'admin':
                this.loadAdminPage();
                break;
            case 'settings':
                this.loadSettingsPage();
                break;
            default:
                console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', pageName);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    initSearch() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞...');
        
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.querySelector('.search-button');

        if (searchInput && searchBtn) {
            // –ü–æ–∏—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            searchBtn.addEventListener('click', () => {
                this.performSearch(searchInput.value);
            });

            // –ü–æ–∏—Å–∫ –ø–æ Enter
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.performSearch(searchInput.value);
                }
            });

            console.log('‚úÖ –ü–æ–∏—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    performSearch(query) {
        console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞:', query);
        
        this.searchQuery = query.trim();
        
        if (!this.searchQuery) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        const searchResults = this.searchApps(this.searchQuery);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchResults.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.showSearchResults(searchResults);
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    searchApps(query) {
        if (typeof DataManager !== 'undefined') {
            return DataManager.searchApps(query);
        }
        return [];
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    showSearchResults(results) {
        const featuredApps = document.getElementById('featuredApps');
        const recentApps = document.getElementById('recentApps');
        
        if (featuredApps) {
            featuredApps.innerHTML = '';
            if (results.length > 0) {
                results.forEach(app => {
                    const card = this.createAppCard(app);
                    if (card) featuredApps.appendChild(card);
                });
            } else {
                featuredApps.innerHTML = '<p class="no-results">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
    initForms() {
        console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º...');
        
        const submitForm = document.getElementById('submitAppForm');
        if (submitForm) {
            submitForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleAppSubmission();
            });
            console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
            console.error('‚ùå –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    initPWA() {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA...');
        
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => {
                    console.log('‚úÖ ServiceWorker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
                    this.setupPWAInstall();
                })
                .catch(error => {
                    console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ServiceWorker:', error);
                });
        } else {
            console.log('‚ÑπÔ∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    setupPWAInstall() {
        console.log('üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∏...');
        
        let deferredPrompt;
        const installContainer = document.getElementById('pwaInstallContainer');
        const installBtn = document.getElementById('pwaInstallBtn');

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            
            if (installContainer) {
                installContainer.style.display = 'block';
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if (installBtn) {
            installBtn.addEventListener('click', async () => {
                if (deferredPrompt) {
                    deferredPrompt.prompt();
                    const { outcome } = await deferredPrompt.userChoice;
                    
                    if (outcome === 'accepted') {
                        this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                        if (installContainer) {
                            installContainer.style.display = 'none';
                        }
                    }
                    
                    deferredPrompt = null;
                }
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async loadData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (typeof DataManager !== 'undefined') {
                DataManager.init();
                console.log('‚úÖ DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async loadHomePage() {
        console.log('üè† –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        try {
            let featuredApps = [];
            let recentApps = [];
            
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ GitHub (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)
            if (typeof ConfigManager !== 'undefined' && window.GitHubDB) {
                const useGitHub = ConfigManager.get('github.useIssuesAsDB', true);
                
                if (useGitHub) {
                    console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ GitHub...');
                    const githubDB = new GitHubDB({
                        owner: ConfigManager.get('github.owner', 'maggpro'),
                        repo: ConfigManager.get('github.repo', 'wpastore'),
                        token: ConfigManager.get('github.token', '') // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —á—Ç–µ–Ω–∏—è
                    });
                    
                    try {
                        const allApps = await githubDB.getAllApps();
                        const approvedApps = allApps.filter(app => app.status === 'approved');
                        featuredApps = approvedApps.filter(app => app.featured).slice(0, 6);
                        recentApps = approvedApps.slice(0, 6);
                        
                        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ GitHub:', { 
                            total: allApps.length, 
                            approved: approvedApps.length,
                            featured: featuredApps.length, 
                            recent: recentApps.length 
                        });
                    } catch (githubError) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub:', githubError.message);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –¥–∞–Ω–Ω—ã–º–∏
                    }
                }
            }
            
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (featuredApps.length === 0 && typeof DataManager !== 'undefined') {
                console.log('üìÇ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                featuredApps = DataManager.getFeaturedApps();
                recentApps = DataManager.getRecentApps();
            }
            
            // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if (featuredApps.length === 0 && typeof WPA_DATA !== 'undefined') {
                console.log('üìÑ Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...');
                featuredApps = WPA_DATA.apps.filter(app => app.featured).slice(0, 6);
                recentApps = WPA_DATA.apps.slice(0, 6);
            }
            
            console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { featured: featuredApps.length, recent: recentApps.length });
            
            this.renderApps(featuredApps, 'featuredApps');
            this.renderApps(recentApps, 'recentApps');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if (typeof WPA_DATA !== 'undefined') {
                const featuredApps = WPA_DATA.apps.filter(app => app.featured).slice(0, 6);
                const recentApps = WPA_DATA.apps.slice(0, 6);
                this.renderApps(featuredApps, 'featuredApps');
                this.renderApps(recentApps, 'recentApps');
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    loadCategoriesPage() {
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        const categoriesContainer = document.getElementById('categoriesGrid');
        if (categoriesContainer && typeof WPA_DATA !== 'undefined') {
            categoriesContainer.innerHTML = '';
            WPA_DATA.categories.forEach(category => {
                const card = this.createCategoryCard(category);
                if (card) {
                    categoriesContainer.appendChild(card);
                }
            });
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', WPA_DATA.categories.length);
        } else {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    loadSubmitPage() {
        console.log('‚ûï –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        // –§–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadAdminPage() {
        console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        this.loadPendingApps();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettingsPage() {
        console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        this.loadSettings();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    async loadPendingApps() {
        console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...');
        
        const pendingContainer = document.getElementById('pendingApps');
        if (!pendingContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        pendingContainer.innerHTML = '<p class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...</p>';
        
        try {
            let pendingApps = [];
            
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ GitHub (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)
            if (typeof ConfigManager !== 'undefined' && window.GitHubDB) {
                const useGitHub = ConfigManager.get('github.useIssuesAsDB', true);
                
                if (useGitHub) {
                    console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑ GitHub...');
                    const githubDB = new GitHubDB({
                        owner: ConfigManager.get('github.owner', 'maggpro'),
                        repo: ConfigManager.get('github.repo', 'wpastore'),
                        token: ConfigManager.get('github.token', '')
                    });
                    
                    try {
                        const allApps = await githubDB.getAllApps();
                        pendingApps = allApps.filter(app => app.status === 'pending');
                        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑ GitHub:', pendingApps.length);
                    } catch (githubError) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub:', githubError.message);
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                        pendingContainer.innerHTML = `
                            <div class="warning-block">
                                <h3>‚ö†Ô∏è –ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ GitHub</h3>
                                <p>–î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º GitHub —Ç–æ–∫–µ–Ω.</p>
                                <button class="button button-fill" onclick="mobileApp.showPage('settings')">
                                    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω
                                </button>
                            </div>
                        `;
                        return;
                    }
                }
            }
            
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (pendingApps.length === 0 && typeof DataManager !== 'undefined') {
                console.log('üìÇ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                pendingApps = DataManager.getPendingApps();
            }
            
            console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', pendingApps.length);
            
            pendingContainer.innerHTML = '';
            
            if (pendingApps.length > 0) {
                pendingApps.forEach(app => {
                    const card = this.createPendingAppCard(app);
                    if (card) {
                        pendingContainer.appendChild(card);
                    }
                });
            } else {
                pendingContainer.innerHTML = '<p class="no-apps">–ù–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</p>';
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:', error);
            pendingContainer.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</p>';
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettings() {
        console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        if (typeof ConfigManager !== 'undefined') {
            const owner = ConfigManager.get('github.owner', '');
            const repo = ConfigManager.get('github.repo', '');
            const token = ConfigManager.get('github.token', '');
            const useIssues = ConfigManager.get('github.useIssuesAsDB', false);
            
            const ownerInput = document.getElementById('githubOwner');
            const repoInput = document.getElementById('githubRepo');
            const tokenInput = document.getElementById('githubToken');
            const useIssuesSelect = document.getElementById('useIssuesAsDB');
            
            if (ownerInput) ownerInput.value = owner;
            if (repoInput) repoInput.value = repo;
            if (tokenInput) tokenInput.value = token;
            if (useIssuesSelect) useIssuesSelect.value = useIssues.toString();
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    renderApps(apps, containerId) {
        console.log(`üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${containerId}`);
        
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = '';
            if (apps.length > 0) {
                apps.forEach(app => {
                    const card = this.createAppCard(app);
                    if (card) {
                        container.appendChild(card);
                    }
                });
                console.log(`‚úÖ –†–µ–Ω–¥–µ—Ä–µ–Ω–æ ${apps.length} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ ${containerId}`);
            } else {
                container.innerHTML = '<p class="no-apps">–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
                console.log(`‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –ø—É—Å—Ç`);
            }
        } else {
            console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    createAppCard(app) {
        if (typeof Components !== 'undefined') {
            return Components.createAppCard(app);
        }
        
        // Fallback —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const card = document.createElement('div');
        card.className = 'app-card';
        card.innerHTML = `
            <div class="app-icon">
                <i class="fas fa-mobile-alt"></i>
            </div>
            <div class="app-info">
                <h3>${app.name}</h3>
                <p>${app.description}</p>
                <div class="app-meta">
                    <span class="developer">${app.developer}</span>
                    <span class="category">${this.getCategoryName(app.category)}</span>
                </div>
            </div>
        `;
        
        card.addEventListener('click', () => {
            this.showAppDetails(app);
        });
        
        return card;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    createCategoryCard(category) {
        if (typeof Components !== 'undefined') {
            return Components.createCategoryCard(category);
        }
        
        // Fallback —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const card = document.createElement('div');
        card.className = 'category-card';
        card.innerHTML = `
            <div class="category-icon">
                <i class="fas fa-folder"></i>
            </div>
            <h3>${category.name}</h3>
            <p>${category.description || '–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</p>
        `;
        
        card.addEventListener('click', () => {
            this.showCategoryApps(category);
        });
        
        return card;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    createPendingAppCard(app) {
        if (typeof Components !== 'undefined') {
            return Components.createPendingAppCard(app);
        }
        
        // Fallback —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const card = document.createElement('div');
        card.className = 'pending-app-card';
        card.innerHTML = `
            <div class="app-info">
                <h3>${app.name}</h3>
                <p>${app.description}</p>
                <div class="app-meta">
                    <span class="developer">${app.developer}</span>
                    <span class="category">${this.getCategoryName(app.category)}</span>
                </div>
            </div>
            <div class="app-actions">
                <button class="button button-small button-success approve-btn" data-id="${app.id}">
                    <i class="fas fa-check"></i> –û–¥–æ–±—Ä–∏—Ç—å
                </button>
                <button class="button button-small button-danger reject-btn" data-id="${app.id}">
                    <i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const approveBtn = card.querySelector('.approve-btn');
        const rejectBtn = card.querySelector('.reject-btn');
        
        if (approveBtn) {
            approveBtn.addEventListener('click', () => this.approveApp(app.id));
        }
        if (rejectBtn) {
            rejectBtn.addEventListener('click', () => this.rejectApp(app.id));
        }
        
        return card;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryName(categoryId) {
        if (typeof WPA_DATA !== 'undefined') {
            const category = WPA_DATA.categories.find(cat => cat.id === categoryId);
            return category ? category.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    showAppDetails(app) {
        console.log('üì± –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', app.name);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2>${app.name}</h2>
                    <button class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <p>${app.description}</p>
                    <div class="app-details">
                        <p><strong>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</strong> ${app.developer}</p>
                        <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${this.getCategoryName(app.category)}</p>
                        ${app.version ? `<p><strong>–í–µ—Ä—Å–∏—è:</strong> ${app.version}</p>` : ''}
                        ${app.website ? `<p><strong>–°–∞–π—Ç:</strong> <a href="${app.website}" target="_blank">${app.website}</a></p>` : ''}
                    </div>
                    ${app.website ? `<a href="${app.website}" target="_blank" class="button button-fill button-large">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>` : ''}
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = modal.querySelector('.close-btn');
        closeBtn.addEventListener('click', () => {
            modal.remove();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        document.body.appendChild(modal);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    showCategoryApps(category) {
        console.log('üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.name);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.showPage('home');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (typeof WPA_DATA !== 'undefined') {
            const categoryApps = WPA_DATA.apps.filter(app => app.category === category.id);
            this.renderApps(categoryApps, 'featuredApps');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.querySelector('.section-title');
            if (title) {
                title.textContent = `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${category.name}`;
            }
        }
    }

    // –û–¥–æ–±—Ä–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async approveApp(appId) {
        console.log('‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', appId);
        
        try {
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –≤ GitHub (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)
            if (typeof ConfigManager !== 'undefined' && window.GitHubDB) {
                const useGitHub = ConfigManager.get('github.useIssuesAsDB', true);
                
                if (useGitHub) {
                    const token = ConfigManager.get('github.token', '');
                    if (!token) {
                        this.showNotification('‚ö†Ô∏è –ù—É–∂–µ–Ω GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"', 'error');
                        this.showPage('settings');
                        return;
                    }
                    
                    console.log('üì° –û–¥–æ–±—Ä–µ–Ω–∏–µ –≤ GitHub...');
                    const githubDB = new GitHubDB({
                        owner: ConfigManager.get('github.owner', 'maggpro'),
                        repo: ConfigManager.get('github.repo', 'wpastore'),
                        token: token
                    });
                    
                    await githubDB.approveApp(appId);
                    this.showNotification('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!', 'success');
                    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –≤ GitHub');
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    await this.loadPendingApps();
                    await this.loadHomePage();
                    return;
                }
            }
            
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (typeof DataManager !== 'undefined') {
                if (DataManager.approveApp(appId)) {
                    this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ)', 'warning');
                    this.loadPendingApps();
                    this.loadHomePage();
                } else {
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
                }
            } else {
                this.showNotification('–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async rejectApp(appId) {
        console.log('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', appId);
        
        try {
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤ GitHub (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)
            if (typeof ConfigManager !== 'undefined' && window.GitHubDB) {
                const useGitHub = ConfigManager.get('github.useIssuesAsDB', true);
                
                if (useGitHub) {
                    const token = ConfigManager.get('github.token', '');
                    if (!token) {
                        this.showNotification('‚ö†Ô∏è –ù—É–∂–µ–Ω GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"', 'error');
                        this.showPage('settings');
                        return;
                    }
                    
                    console.log('üì° –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ GitHub...');
                    const githubDB = new GitHubDB({
                        owner: ConfigManager.get('github.owner', 'maggpro'),
                        repo: ConfigManager.get('github.repo', 'wpastore'),
                        token: token
                    });
                    
                    await githubDB.rejectApp(appId);
                    this.showNotification('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'info');
                    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ GitHub');
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    await this.loadPendingApps();
                    return;
                }
            }
            
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (typeof DataManager !== 'undefined') {
                if (DataManager.rejectApp(appId)) {
                    this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
                    this.loadPendingApps();
                } else {
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
                }
            } else {
                this.showNotification('–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: ' + error.message, 'error');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async handleAppSubmission() {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        const formData = {
            name: document.getElementById('appName').value.trim(),
            description: document.getElementById('appDescription').value.trim(),
            category: document.getElementById('appCategory').value,
            developer: document.getElementById('appDeveloper').value.trim(),
            version: document.getElementById('appVersion').value.trim() || '1.0.0',
            website: document.getElementById('appWebsite').value.trim(),
            icon: document.getElementById('appIcon').value.trim(),
            screenshots: document.getElementById('appScreenshots').value.trim()
                .split(',')
                .map(url => url.trim())
                .filter(url => url && this.isValidUrl(url)),
            features: []
        };

        console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.name || !formData.description || !formData.category || !formData.developer) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }

        if (!formData.website || !this.isValidUrl(formData.website)) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤–µ–±-—Å–∞–π—Ç–∞', 'error');
            return;
        }

        if (formData.icon && !this.isValidUrl(formData.icon)) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∫–æ–Ω–∫–∏', 'error');
            return;
        }

        try {
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GitHub –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
            if (typeof ConfigManager !== 'undefined' && window.GitHubDB) {
                const useGitHub = ConfigManager.get('github.useIssuesAsDB', true);
                
                if (useGitHub) {
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ GitHub...');
                    const githubDB = new GitHubDB({
                        owner: ConfigManager.get('github.owner', 'maggpro'),
                        repo: ConfigManager.get('github.repo', 'wpastore'),
                        token: ConfigManager.get('github.token', '') // –¢–æ–∫–µ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                    });
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Issues
                    const token = ConfigManager.get('github.token', '');
                    if (!token) {
                        this.showNotification('‚ö†Ô∏è –ù—É–∂–µ–Ω GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"', 'error');
                        this.showPage('settings');
                        return;
                    }
                    
                    await githubDB.addApp(formData);
                    this.showNotification('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥!', 'success');
                    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub');
                } else {
                    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    if (typeof DataManager !== 'undefined') {
                        const newApp = DataManager.addApp(formData);
                        this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ)', 'warning');
                        console.log('‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newApp);
                    } else {
                        this.showNotification('–û—à–∏–±–∫–∞: DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
                        return;
                    }
                }
            } else {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
                if (typeof DataManager !== 'undefined') {
                    const newApp = DataManager.addApp(formData);
                    this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ)', 'warning');
                    console.log('‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newApp);
                } else {
                    this.showNotification('–û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
                    return;
                }
            }
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('submitAppForm').reset();
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.showPage('home');
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message, 'error');
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveSettings() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        if (typeof ConfigManager !== 'undefined') {
            const owner = document.getElementById('githubOwner').value.trim();
            const repo = document.getElementById('githubRepo').value.trim();
            const token = document.getElementById('githubToken').value.trim();
            const useIssues = document.getElementById('useIssuesAsDB').value === 'true';

            ConfigManager.set('github.owner', owner);
            ConfigManager.set('github.repo', repo);
            ConfigManager.set('github.token', token);
            ConfigManager.set('github.useIssuesAsDB', useIssues);

            this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ GitHub
            if (useIssues) {
                setTimeout(() => this.loadData(), 1000);
            }
        } else {
            this.showNotification('ConfigManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
    setupEvents() {
        console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const saveSettingsBtn = document.getElementById('saveSettings');
        if (saveSettingsBtn) {
            saveSettingsBtn.addEventListener('click', () => this.saveSettings());
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
        
        if (typeof Utils !== 'undefined') {
            Utils.showNotification(message, type);
        } else {
            // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let mobileApp;
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåê DOM –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    mobileApp = new WPAMobileApp();
});




