// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è WPA –∫–∞—Ç–∞–ª–æ–≥–∞
const WPA_CONFIG = {
    // GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    github: {
        owner: 'maggpro',             // GitHub username –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        repo: 'wpastore',             // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        token: '',                     // GitHub Personal Access Token (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ localStorage –∏–ª–∏ URL)
        useIssuesAsDB: true,          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub Issues –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        autoSync: true,               // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        syncInterval: 5 * 60 * 1000   // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app: {
        name: 'WPA.STORE',
        version: '2.0.0',
        description: '–ú–∞–≥–∞–∑–∏–Ω WPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π',
        defaultCategory: 'productivity',
        itemsPerPage: 12,
        searchDebounce: 300,
        enableNotifications: true,
        enableAnimations: true
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UI
    ui: {
        theme: 'light',               // light, dark, auto
        language: 'ru',               // ru, en
        showRatings: true,
        showDownloads: true,
        showCategories: true,
        enableFilters: true,
        enableSorting: true
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache: {
        enabled: true,
        maxAge: 10 * 60 * 1000,      // 10 –º–∏–Ω—É—Ç
        storageKey: 'wpa_catalog_cache'
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const ConfigManager = {
    // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    get(key, defaultValue = null) {
        const keys = key.split('.');
        let value = WPA_CONFIG;
        
        for (const k of keys) {
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            } else {
                return defaultValue;
            }
        }
        
        return value;
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    set(key, value) {
        const keys = key.split('.');
        const lastKey = keys.pop();
        let target = WPA_CONFIG;
        
        for (const k of keys) {
            if (!target[k] || typeof target[k] !== 'object') {
                target[k] = {};
            }
            target = target[k];
        }
        
        target[lastKey] = value;
        this.saveToLocalStorage();
        
        // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        if (key === 'github.token' && value) {
            localStorage.setItem('github_token', value);
            console.log('‚úÖ GitHub —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ LocalStorage
    loadFromLocalStorage() {
        try {
            const saved = localStorage.getItem('wpa_config');
            if (saved) {
                const parsed = JSON.parse(saved);
                Object.assign(WPA_CONFIG, parsed);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            const urlParams = new URLSearchParams(window.location.search);
            const tokenFromUrl = urlParams.get('token');
            if (tokenFromUrl) {
                WPA_CONFIG.github.token = tokenFromUrl;
                console.log('‚úÖ GitHub —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            const savedToken = localStorage.getItem('github_token');
            if (savedToken && !WPA_CONFIG.github.token) {
                WPA_CONFIG.github.token = savedToken;
                console.log('‚úÖ GitHub —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ LocalStorage
    saveToLocalStorage() {
        try {
            localStorage.setItem('wpa_config', JSON.stringify(WPA_CONFIG));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    },
    
    // –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    reset() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞
        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.')) {
            localStorage.removeItem('wpa_config');
            localStorage.removeItem('wpa_catalog_data');
            location.reload();
        }
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å GitHub –Ω–∞—Å—Ç—Ä–æ–µ–∫
    validateGitHubConfig() {
        const owner = this.get('github.owner');
        const repo = this.get('github.repo');
        
        if (!owner || owner === 'your-username') {
            return {
                valid: false,
                message: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GitHub username'
            };
        }
        
        if (!repo) {
            return {
                valid: false,
                message: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è'
            };
        }
        
        return { valid: true };
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å GitHub URL
    getGitHubUrl() {
        const owner = this.get('github.owner');
        const repo = this.get('github.repo');
        return `https://github.com/${owner}/${repo}`;
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å GitHub Issues URL
    getGitHubIssuesUrl() {
        return `${this.getGitHubUrl()}/issues`;
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å GitHub API URL
    getGitHubApiUrl() {
        const owner = this.get('github.owner');
        const repo = this.get('github.repo');
        return `https://api.github.com/repos/${owner}/${repo}`;
    },
    
    // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
    setGitHubToken(token) {
        if (token && token.startsWith('github_pat_')) {
            this.set('github.token', token);
            console.log('‚úÖ GitHub —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return true;
        } else {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub —Ç–æ–∫–µ–Ω–∞');
            return false;
        }
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
    hasGitHubToken() {
        return !!this.get('github.token');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    ConfigManager.loadFromLocalStorage();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ localStorage
    const savedToken = localStorage.getItem('github_token');
    if (savedToken && !ConfigManager.hasGitHubToken()) {
        ConfigManager.setGitHubToken(savedToken);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const githubValidation = ConfigManager.validateGitHubConfig();
    if (!githubValidation.valid) {
        console.warn('GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', githubValidation.message);
    } else {
        console.log('‚úÖ GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
        console.log('üì° –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:', ConfigManager.getGitHubUrl());
        console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', ConfigManager.hasGitHubToken() ? '–î–∞' : '–ù–µ—Ç');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
    window.setGitHubToken = (token) => {
        if (ConfigManager.setGitHubToken(token)) {
            console.log('üéâ GitHub —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            setTimeout(() => location.reload(), 1000);
        }
    };
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
window.WPA_CONFIG = WPA_CONFIG;
window.ConfigManager = ConfigManager;
